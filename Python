# air_quality_prediction.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# 1. Load Dataset
df = pd.read_csv("air_quality_data.csv")  # Replace with actual path

# 2. Data Preprocessing
df.fillna(df.mean(), inplace=True)  # Handle missing values

# 3. Feature Selection
features = ['PM2.5', 'PM10', 'NO2', 'SO2', 'CO', 'O3', 'temperature', 'humidity', 'wind_speed']
target = 'AQI'  # Replace with 'AQI Category' for classification

X = df[features]
y = df[target]

# 4. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 6. Model Building
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# 7. Predictions and Evaluation
y_pred = model.predict(X_test_scaled)
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("RÂ² Score:", r2_score(y_test, y_pred))

# 8. Feature Importance
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_importance_df.sort_values(by='Importance', ascending=False, inplace=True)

# Plotting feature importance
sns.barplot(data=feature_importance_df, x='Importance', y='Feature')
plt.title('Feature Importance in Air Quality Prediction')
plt.tight_layout()
plt.show()
